version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres:16.4-alpine
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    extends:
      file: common-config.yml
      service: network-deploy-service

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.20
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.6
    container_name: keycloak
    command: [ "start-dev" ]
    restart: unless-stopped
    ports:
      - "7080:8080"
    environment:
      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.upload_scripts=enabled
      KC_DB: postgres
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ../../keycloak/themes/oralie/theme:/opt/keycloak/themes
      - ../../keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    #      - ../libs/providers:/opt/keycloak/providers
    extends:
      file: common-config.yml
      service: network-deploy-service

  oralie_db:
    image: mysql
    container_name: oralie_db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: oralie_db
    volumes:
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  elasticsearch:
    image: elasticsearch:8.15.3
    container_name: elasticsearch
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
      - "9300:9300"
    extends:
      file: common-config.yml
      service: network-deploy-service

  zookeeper:
    image: debezium/zookeeper:2.7.3.Final
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8989:8080"
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
    extends:
      file: common-config.yml
      service: network-deploy-service

  debezium:
    image: debezium/connect:2.5
    container_name: debezium
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
    ports:
      - "9083:8083"
    volumes:
      - ./configs:/kafka/connect
    extends:
      file: common-config.yml
      service: network-deploy-service

  connector-setup:
    image: curlimages/curl:latest
    container_name: connector-setup
    depends_on:
      - debezium
    entrypoint: >
      sh -c "
      sleep 10;
      echo 'Creating PostgreSQL connector...';
      curl -X POST http://debezium:8083/connectors/ -H 'Content-Type: application/json' -d @/configs/postgres_connector.json;
      echo 'Creating MySQL connector...';
      curl -X POST http://debezium:8083/connectors/ -H 'Content-Type: application/json' -d @/configs/mysql_connector.json;
      "
    volumes:
      - ./config/postgres_connector.json:/configs/postgres_connector.json
      - ./config/mysql_connector.json:/configs/mysql_connector.json
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.1.0
    container_name: read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      vietquoc:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.0
    container_name: write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3003:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.1.0
    container_name: backend
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    container_name: gateway
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


  configserver:
    image: vietquoc2408/configserver-oralie:${LATEST_VERSION}
    container_name: configserver-oralie-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: "configserver"
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: vietquoc2408/eurekaserver-oralie:${LATEST_VERSION}
    container_name: eurekaserver-oralie-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  accounts:
    image: vietquoc2408/accounts-oralie:${LATEST_VERSION}
    container_name: accounts-oralie-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      OTEL_SERVICE_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/accounts_db"
      IDP_URL: ${KEYCLOAK_URL}
      IDP_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      IDP_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
    extends:
      file: common-config.yml
      service: microservice-service-config

  products:
    image: vietquoc2408/products-oralie:${LATEST_VERSION}
    container_name: products-oralie-ms
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "products"
      OTEL_SERVICE_NAME: "products"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/products_db"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC: "products-topic"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "products-group"
    extends:
      file: common-config.yml
      service: microservice-service-config-kafka

  carts:
    image: vietquoc2408/carts-oralie:${LATEST_VERSION}
    container_name: carts-oralie-ms
    ports:
      - "8082:8082"
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "carts"
      OTEL_SERVICE_NAME: "carts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/carts_db"
    extends:
      file: common-config.yml
      service: microservice-service-config

  orders:
    image: vietquoc2408/orders-oralie:${LATEST_VERSION}
    container_name: orders-oralie-ms
    ports:
      - "8083:8083"
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "orders"
      OTEL_SERVICE_NAME: "orders"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/orders_db"
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC: "orders-topic"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "orders-group"
    extends:
      file: common-config.yml
      service: microservice-service-config-kafka

  social:
    image: vietquoc2408/social-oralie:${LATEST_VERSION}
    container_name: social-oralie-ms
    ports:
      - "8086:8086"
    healthcheck:
      test: "curl --fail --silent localhost:8086/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "social"
      OTEL_SERVICE_NAME: "social"
      AWS_REGION_STATIC: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      AWS_CREDENTIALS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_CREDENTIALS_SECRET_KEY: ${AWS_SECRET_KEY}
    extends:
      file: common-config.yml
      service: microservice-service-config

  rates:
    image: vietquoc2408/rates-oralie:${LATEST_VERSION}
    container_name: rates-oralie-ms
    ports:
      - "8084:8084"
    healthcheck:
      test: "curl --fail --silent localhost:8084/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "rates"
      OTEL_SERVICE_NAME: "rates"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/rates_db"
    extends:
      file: common-config.yml
      service: microservice-service-config

  inventory:
    image: vietquoc2408/inventory-oralie:${LATEST_VERSION}
    container_name: inventory-oralie-ms
    ports:
      - "8089:8089"
    healthcheck:
      test: "curl --fail --silent localhost:8089/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      oralie_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "inventory"
      OTEL_SERVICE_NAME: "inventory"
      SPRING_DATASOURCE_URL: "jdbc:mysql://oralie_db:3306/inventory_db"
      SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC: "inventory-topic"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "inventory-group"
    extends:
      file: common-config.yml
      service: microservice-service-config-kafka

  notification:
    image: vietquoc2408/notification-oralie:${LATEST_VERSION}
    container_name: notification-oralie-ms
    ports:
      - "8087:8087"
    environment:
      SPRING_APPLICATION_NAME: "notification"
      SPRING_MAIL_HOST: ${MAIL_HOST}
      SPRING_MAIL_PORT: ${MAIL_PORT}
      SPRING_MAIL_USERNAME: ${USERNAME_MAIL}
      SPRING_MAIL_PASSWORD: ${PASSWORD_MAIL}
      SPRING_MAIL_PROTOCOL: "smtp"
      SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC: "notification-topic"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "notification-group"
    extends:
      file: common-config.yml
      service: kafka-base-config

  search:
    image: vietquoc2408/search-oralie:${LATEST_VERSION}
    container_name: search-oralie-ms
    ports:
      - "8088:8088"
    healthcheck:
      test: "curl --fail --silent localhost:8088/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "search"
      OTEL_SERVICE_NAME: "search"
      SPRING_ELASTICSEARCH_URIS: "elasticsearch:9200"
      SPRING_KAFKA_TEMPLATE_DEFAULT_TOPIC: "search-topic"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "search-group"
    extends:
      file: common-config.yml
      service: microservice-service-config-kafka

  gatewayserver:
    image: vietquoc2408/gatewayserver-oralie:${LATEST_VERSION}
    container_name: gatewayserver-oralie-ms
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      products:
        condition: service_healthy
      carts:
        condition: service_healthy
      orders:
        condition: service_healthy
      social:
        condition: service_healthy
      search:
        condition: service_healthy
      rates:
        condition: service_healthy
      inventory:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:7080/realms/oralie/protocol/openid-connect/certs"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config

volumes:
  postgres_data:
  mysql_data:
  pgadmin:
  esdata:

networks:
  vietquoc:
    driver: bridge

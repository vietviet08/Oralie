version: '3.8'

services:
  postgres:
    image: postgres:16.4-alpine
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "keycloak" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
        - vietquoc

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8.10
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@domain.local
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "5050:80"
    networks:
        - vietquoc
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: keycloak
#    command: [ "start-dev", "--import-realm" ]
    command: ["start-dev"]
#    restart: unless-stopped
    ports:
      - "7080:8080"
    environment:
      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.upload_scripts=enabled
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_URL:  jdbc:postgresql://postgres/keycloak
#      KC_HOSTNAME_URL: http://keycloak.localhost:7080
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
#      GF_URL: ${GF_HOSTNAME}:${GF_SERVER_HTTP_PORT}
#      GF_ADMIN_USERNAME: ${GF_ADMIN_USERNAME}
#      GF_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
    extends:
      file: common-config.yml
      service: network-deploy-service

  accounts_db:
    image: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: accounts_db
    volumes:
      - accountsdb_data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  products_db:
    image: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: products_db
    volumes:
      - productsdb_data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  carts_db:
    image: mysql
    ports:
      - "3308:3306"
    environment:
      MYSQL_DATABASE: carts_db
    volumes:
      - cartsdb_data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  orders_db:
    image: mysql
    ports:
      - "3309:3306"
    environment:
      MYSQL_DATABASE: orders_db
    volumes:
      - ordersdb_data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: microservice-db-config

  kafka:
    image: docker.io/bitnami/kafka:3.7
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  read:
    image: grafana/loki:3.1.0
    container_name: read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      vietquoc:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.0
    container_name: write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:3.1.0
    container_name: backend
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    container_name: gateway
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


  configserver:
    image: "vietquoc2408/configserver-oralie:latest"
    container_name: configserver-oralie-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: "configserver"
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "vietquoc2408/eurekaserver-oralie:latest"
    container_name: eurekaserver-oralie-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  accounts:
    image: "vietquoc2408/accounts-oralie:latest"
    container_name: accounts-oralie-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      accounts_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      #      SPRING_RABBITMQ_HOST: "rabbit"
      OTEL_SERVICE_NAME: "accounts"
#      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accounts_db:3306/accounts_db"
    extends:
      file: common-config.yml
      service: microservice-service-config

  products:
    image: "vietquoc2408/products-oralie:latest"
    container_name: products-oralie-ms
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      products_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "products"
      OTEL_SERVICE_NAME: "products"
      SPRING_DATASOURCE_URL: "jdbc:mysql://products_db:3306/products_db"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "root"
    extends:
      file: common-config.yml
      service: microservice-service-config

  carts:
    image: "vietquoc2408/carts-oralie:latest"
    container_name: carts-oralie-ms
    ports:
      - "8082:8082"
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      carts_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "carts"
      OTEL_SERVICE_NAME: "carts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://carts_db:3306/carts_db"
    extends:
      file: common-config.yml
      service: microservice-service-config

  orders:
    image: "vietquoc2408/orders-oralie:latest"
    container_name: orders-oralie-ms
    ports:
      - "8083:8083"
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      orders_db:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "orders"
      OTEL_SERVICE_NAME: "orders"
      SPRING_DATASOURCE_URL: "jdbc:mysql://orders_db:3306/orders_db"
    extends:
      file: common-config.yml
      service: microservice-service-config

  gatewayserver:
    image: "vietquoc2408/gatewayserver-oralie:latest"
    container_name: gatewayserver-oralie-ms
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      products:
        condition: service_healthy
      carts:
        condition: service_healthy
      orders:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:7080/realms/oralie/protocol/openid-connect/certs"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    extends:
      file: common-config.yml
      service: microservice-eurekaserver-config

#  notification:
#    image: "vietquoc2408/notification-oralie:latest"
#    container_name: notification-oralie-ms
#    ports:
#      - "9010:9010"
#    environment:
#      SPRING_APPLICATION_NAME: "notification"
#      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
#    extends:
#      file: common-config.yml
#      service: network-deploy-service

volumes:
  postgres_data:
  kafka_data:
    driver: local
  accountsdb_data:
  productsdb_data:
  cartsdb_data:
  ordersdb_data:

networks:
  vietquoc:
    driver: bridge
